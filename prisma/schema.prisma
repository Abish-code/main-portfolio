generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"  // Updated to use MySQL instead of PostgreSQL
  url      = env("DATABASE_URL")  // This references the DATABASE_URL in .env file
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String? @db.VarChar(4096)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(4096)
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  guestbook     Guestbook[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ContentMeta {
  id        BigInt     @id @default(autoincrement())
  slug      String     @unique
  createdAt DateTime   @default(now())
  reactions Reaction[]
  shares    Share[]
  views     View[]

  @@map("content_meta")
}

model View {
  id        BigInt      @id @default(autoincrement())
  sessionId String
  contentId BigInt
  createdAt DateTime    @default(now())
  content   ContentMeta @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@map("views")
}

model Share {
  id        BigInt      @id @default(autoincrement())
  sessionId String
  type      ShareType?  @default(OTHERS)
  contentId BigInt
  createdAt DateTime    @default(now())
  content   ContentMeta @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@map("shares")
}

model Reaction {
  id        BigInt        @id @default(autoincrement())
  sessionId String
  type      ReactionType? @default(LIKED)
  contentId BigInt
  count     Int?          @default(1)
  createdAt DateTime      @default(now())
  content   ContentMeta   @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@map("reactions")
}

model Guestbook {
  id         BigInt   @id @default(autoincrement())
  body       String   @db.VarChar(1024)
  created_at DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("guestbook")
}

enum ShareType {
  CLIPBOARD
  TWITTER
  LINKEDIN
  OTHERS
}

enum ReactionType {
  LIKED
  CLAPPING
  LOVED
  THINKING
}
